@page "/customer-list"
@using CRM.DTOs.CustomerDTOs;
@using System.Text.Json;
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Forms;
@using CRM.AppWebBlazor.Data;

<h3>Buscar Cliente</h3>
<EditForm Model="searchQuery" OnValidSubmit="SubmitSearch">
    <div class="row">
        <div class="col-3">
            <div class="form-group">
                <label for="Name">Nombre:</label>
                <InputText class="form-control" @bind-Value="searchQuery.Name_Like" > </InputText>
            </div>
        </div>
        <div class="col-3">
            <div class="form-group">
                <label for="LastName">Apellido:</label>
                <InputText class="form-control" @bind-Value="searchQuery.LastName_Like" ></InputText>
            </div>
        </div>
        <div class="col-2" >
            <div class="form-group">
                <label for="Take">CantReg X Pagina</label>
                <select class="form-control" @bind="searchQuery.Take">
                    @for (var i = 10; i < 1000; i += 10)
                    {
                        <option value="@i">@i</option>
                    }
                </select>
            </div>
        </div>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">Buscar</button>
    <NavLink href="/create-customer" class="btn btn-secundary">Ir a crear</NavLink>
    <br />
</EditForm>
<br />
<h3>lista de clientes</h3>
<div class="row" style="overflow:auto !important;max-width:600px ">
    <nav aria-label="Page naviation example">
        <ul class="pagination">
            <li class="page-item">
                <NavLink class="page-link" @onclick="async () => await PaginationSearch(skipAnte)">Anterior</NavLink>
            </li>
            @foreach ( var item in paginations)
            {
                if ( item.Skip != searchQuery.Skip)
                {
                    <li class="page-item" >  
                        <NavLink class="page-link" @onclick="async () => await PaginationSearch(item.Skip)">@item.NumPage</NavLink>
                        </li>
                }
                else
                {
                    <li class="page-item active">
                    <NavLink class="page-link active" @onclick="async () => await PaginationSearch(item.Skip)">@item.NumPage</NavLink>
                    </li>
                }
            }
            <NavLink class="page-link" @onclick="async () => await PaginationSearch(skipSi)">Siguiente</NavLink>
        </ul>

    </nav>
</div>
<div class="row-cols-6">
    <span>Total registros: @searchResult.CountRow</span>
</div>
@if(searchResult != null && searchResult.Data != null && searchResult.Data.Count > 0)
{
    <table class="table">
        <thead>
            <tr>
                <th>Nombre</th>
                <th>Apellido</th>
                <th>Direccion</th>
                <th>Acciones</th>
            </tr>
        </thead>
    
        <tbody>
            @foreach(var customer in searchResult.Data)
            {
                <tr> 
                    <td>@customer.Name</td>
                    <td>@customer.LastName</td>
                    <td>@customer.Address</td>
                    <td>
                        <button class="btn btn-dark" @onclick="() => goEdit(customer.Id)">Editar</button>
                        <button class="btn btn-info" @onclick="() => GoDetails(customer.Id)">Ver</button>
                        <button class="btn btn-danger" @onclick="() => GoDelete(customer.Id)">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@code{
    //inyeccion de dependencias de customerservice y naviation manager
    [Inject]
    CustomerService customerService {get; set;}
    [Inject]
    NavigationManager navigation {get; set;}

    //declara e inicializacion de objetos y variable
    SearchResultCustomerDTO searchResult = new SearchResultCustomerDTO();
    SearchQueryCustomerDTO searchQuery = new SearchQueryCustomerDTO {Take = 10};
    List<Pagination> paginations = new List<Pagination>();
    int skipAnte = 0;
    int skipSi =0;

    //metodo para realizar un busque
    private async Task Search()
    {
        searchResult = await customerService.Search(searchQuery);
    }

    //metodo que se llama cuando se inicializa el componente
    /*
    * se utiliza para realizar inicializaciones o tareas
    * cuando se carga una pagina o componente de blazor
    * este metodo se llama automaticamente cuando el componente se esta inicializando
    * antes de que se muestre en la interfaz de usuario
    */
    protected override async Task OnInitializedAsync()
    {
        //configuracion inicial de la busqueda
        searchQuery.SendRowCount = 2;
        searchQuery.Skip = 0;

        //realiza la busqueda inicial
        await Search();

        //actualiza la paginacion
        UpdatePagination();
    }

    //metodo privado para realizar una busqueda despues de una accion de busqueda
    private async Task SubmitSearch()
    {
        //configuracion de la busqueda
        searchQuery.SendRowCount = 2;
        searchQuery.Skip = 0;

        //realizar la busqueda
        await Search();

        //actualiza la pagina
        UpdatePagination();
    }

    //metodo para realizar una busqueda paginada
    private async Task PaginationSearch(int skip)
    {
        //almacenar temporalmente la cantidad de filas de resultados
        int countRowTemp = searchResult.CountRow;

        //configuracion de la busqueda paginada
        searchQuery.SendRowCount = 1;
        searchQuery.Skip = skip;

        //realiza la busqueda paginada
        await Search();

        //restaurar la cantidad de filas originales
        searchResult.CountRow = countRowTemp;

        //actualiza la paginacion
        UpdatePagination();
    }

    //metodo para navegar a las paginas de edicion detalle y eliminacion
    private void goEdit (int customerId)
    {
        navigation.NavigateTo($"/edit-customer/{customerId}");
    }

    private void GoDetails(int customerId)
    {
        navigation.NavigateTo($"/edit-customer/{customerId}");
    }

    private void GoDelete(int customerId)
    {
        navigation.NavigateTo($"/delete-customer/{customerId}");
    }

    //metodo para actualizar la lista de paginacion
    private void UpdatePagination()
    {
        //inicializar la lista de paginacion
        paginations = new List<Pagination>();

        //calcular el numero total de paginas
        int totalPages = (int)Math.Ceiling((double)searchResult.CountRow / searchQuery.Take);

        //calcular el valor de skipante y skipsi
        skipAnte = searchQuery.Skip > 0 ? searchQuery.Skip - searchQuery.Take : 0;
        int skipMax = 0;

        //generar objetos de paginacion y agregalos a la lista //PAGINA 112 DEL DOCUMENTO
        for (var i = 0; i < totalPages; i ++)
        {
            var pagination = new Pagination()
            {
                Skip = i * searchQuery.Take,
                NumPage = i + 1
            };

            paginations.Add(pagination);
            skipMax = pagination.Skip;
        }

        //calcular el valor de skipsi
        skipSi = searchQuery.Skip + searchQuery.Take;
        skipSi = skipSi > skipMax ? skipSi - searchQuery.Take : skipSi;
    }

    //clase para representar la informacion de paginacion
    class Pagination
    {
        public int NumPage { get; set; }
        public int Skip { get; set; }
    }

}
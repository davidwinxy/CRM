@page "/edit-customer/{Id:int}"

@using CRM.DTOs.CustomerDTOs
@using Microsoft.AspNetCore.Components.Forms;
@using System.ComponentModel.DataAnnotations;
@using CRM.AppWebBlazor.Data;

@if (isSuccess == false && isError == false)
{
    <h3>Modificar Cliente</h3>

    <EditForm Model="customer" OnValidSubmit="Edit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <div class="row">
            <div class="col-4">
                <div class="form-group">
                    <label for="Name">Nombre</label>
                    <InputText class="form-control" @bind-Value="customer.Name" ></InputText>
                    <ValidationMessage For="() => customer.Name" ></ValidationMessage>
                </div>
            </div>
            <div class="col-4">
                <div class="form-group">
                    <label for="LastName">Apellido:</label>
                    <InputText class="form-control" @bind-Value="customer.LastName" ></InputText>
                    <ValidationMessage For="() => customer.LastName" ></ValidationMessage>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <div class="form-group">
                    <label for="Address">Direccion:</label>
                    <InputTextArea class="form-control" @bind-Value="customer.Address" ></InputTextArea>
                    <ValidationMessage For="() => customer.Address" ></ValidationMessage>
                </div>
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-12">
                <button type="submit" class="btn btn-primary">Modificar</button>
                <NavLink href="/customer-list" class="btn btn-secondary">Cancelar</NavLink>
            </div>
        </div>
    </EditForm>
}
else if(isSuccess)
{
    customer = new EditCustomerDTO();
    isError = false;
    <p class="alert-success">cliente se modifico con exito</p>
    <NavLink href="/customer-list" class="btn btn-primary">aceptar</NavLink>
}
else if (isError)
{
    <p class="alert-error">sucedio un error al intentar modificar o no a realizado ninguna modificacion al registro actual</p>
    <NavLink href="/customer-list" class="btn btn-primary">Aceptar</NavLink>
}

@code{
    //declaracion de un parametro llamado id que puede ser pasado al componente
    [Parameter]
    public int Id {get; set;}

    //inyeccion de dependencia de customerservices para
    //acceder a los servicios relacionados con los clientes
    [Inject]
    CustomerService customerService {get; set;}

    //declara e inicializa de un objeto customer
    //para almacenar los detalles relacionados con los clientes
    EditCustomerDTO customer = new EditCustomerDTO();

    //declaracion de variables booleanas para manejar el estado de ecito y error
    bool isSuccess = false;
    bool isError = false;

    //metodo  que se llama cuando se inicializa el componente
    protected override async Task OnInitializedAsync()
    {
        //realiza una llamada asincronica para obtener los
        //detalles del cliente por su id
        var customerDetail = await customerService.GetById(Id);

        //inicializa el objeto customer con los detalles del cliente
        customer = new EditCustomerDTO(customerDetail);
    }

    //metodo para editar el cliente
    private async Task Edit()
    {
        //realiza una llamada asinconica para editar la informacion
        int result = await customerService.Edit(customer);

        //verifica si el resultado de la edicion es diferente
        //de cero (exito) o igual a cero (error)
        if (result != 0)
            isSuccess = true;
        else
            isError = true;
    }

}